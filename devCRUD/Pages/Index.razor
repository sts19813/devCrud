@page "/"
@using Services
@inject IDeveloperService developerService
@inject IJSRuntime jsRuntime
<h3>Developers</h3>
<a href="/developer/add" class="btn btn-outline-dark my-2">Add more</a>
<div class="row">
    <div class="col-md-6">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in persons)
                {
                    <tr>
                        <td>@person.name</td>
                        <td>@person.correo</td>
                        <td>
                            <a href="/developer/edit/@person.Id" class="btn btn-success">Edit</a>
                            <a class="btn btn-danger" @onclick="async ()=> await Delete(person)">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    //listado de developers
    private List<Models.Developer> persons = new();

    //metodo para eliminar un dev, como parametro recive el objeto Developer
    private async Task Delete(Models.Developer person)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "estas seguro de lo que estas haciendo????");

        //se valida la confirmacion por parte del cliente
        if (confirmed)
        {
            //se elimina y la respuesta del servicio se evalua antes de removerlo de la tabla.
            if (developerService.Delete(person.Id))
            {
                //se elimina el objeto developer, del listado de objetos
                persons.Remove(person);
            }

        }
    }

    //inicio de la web app
    protected override void OnInitialized()
    {
        //se obtiene todos los datos de la tabla dev, es un listado de objeto del modelo developers
        persons = developerService.GetAll();
        base.OnInitialized();
    }
}
